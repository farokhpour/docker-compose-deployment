server_tokens off;

server {
    client_max_body_size 0;
    listen 80;
    include /ssl/ssl.conf;
    index index.php index.html;
    server_name app;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options nosniff always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-XSS-Protection "1; mode=block" always;
    # add_header Referrer-Policy "strict-origin";

    # Restrict  Host Header 
    if ( $host !~* ^(host-ip-or-nameserver)$ ) {
        return 444 "Operation Not Allowed";
    }
    # for multi host Headers use below
    # if ( $host !~* ^(host-ip-or-nameserver1|host-ip-or-nameserver2)$ ) {
    #     return 444 "Operation Not Allowed";
    # }
    
    # Compress 
    gzip on;
    gzip_types text/html text/css application/javascript;
    gzip_min_length 1000;

    # root directive specifies the root directory that will be used to search for a file
    root /var/www/html/public;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_read_timeout 300;
        fastcgi_buffer_size 32k;
        fastcgi_buffers 16 32k;
        fastcgi_max_temp_file_size 0;
    }

    # disable cache headers for requests matching a numeric file with a .js
    location ~* ^/\d+\.js$ {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        # return 500;
    }

    location / {
        # for redirect http to https in case of using without nameserver
        # if ($scheme != "https") {
        #     return 301 https://$host$request_uri;
        # }
        if ( $request_method  ~ ^(OPTIONS)$ ) {
            return 405 "METHOD Not Allowed";
        }
        try_files $uri $uri/ /index.php?$query_string;
    }
    location /storage {
        return https://$host/404;

    }
    location =/nginx_status{
        stub_status on;
        allow 10.255.255.255;
        deny all;
    }

}
